DALServer TAP Implementation
Based upon OpenCADC UWS, TAP classes
-------------------------------------


Library
    CADC classes go into vendor, jars into lib
      - Also the dependencies
    UWS, TAP parser, DALI etc. are self-contained Java classes
    For TAP, need UWS and ADQL parser, table upload, TAP schema
      - Output processing is via DALServer framework
      - Input params can probably be via the TAP code?

TAP Service
    web.xml via Config mechanism
      - DBMS target, login info, tablespace, TAP Schema
      - Supported LANG options
    Param therein points to custom JobManager
      - Most of JobManager is generic
      - Custom JobRunner requires custom version of TAP QueryRunner
      	  Default output is to DALServer RequestResponse
	    - DALServer table configuration used to customize output
	    - DALServer output formatters used to format output
	  Output to ResultStore, e.g, file or VOSpace
	  Output to a DBMS or MyDB table
    LANG parameter
      - Supports ADQL, native SQL, maybe PQL or others later
    FORMAT parameter
    OUTPUT parameter
      - Disposition of output table (stream, store, dbms)

    Implementation
      Custom JobManager defines JobExecutor, JobPersistence
        - JobExecutor invokes designated JobRunner class
      JobRunner
        - Custom version of TAP.queryRunner()
	- queryRunner (below) prepares and executes SQL statement
	- processes query resultSet
	- Invoke custom resultSet processing code in DALServer.TAP
      Output Processing
	- Iterate over resultSet as usual, DALServer code
	- Output to RequestResponse, to file, to DBMS

      Code Structure
        1. TapRestlet (vs conventional TapServlet)
	  - Parameter set construction, HTTP response via Restlet API
	  - Abstract all the external (servlet/restlet) details
	  - This is what UWS (Web) executes async as the JobRunner

	2. TapQuery
	  2.1 langADQL
	    - Translate, verify ADQL statement
	  2.2 langSQL
	    - Translate, verify SQL statement (as necessary)

	  - Perform the actual DBMS query, get resultSet
	  - Iterate over resultSet
	      Perform output table processing on result
	  - Output rows to RequestResponse

	3. Output processing
	  - Serialize to output
	  - Output to file, to DBMS, or stream back to client
	  - For DBMS output, write INSERT script, dispose to DBMS
	      this allows output DBMS to be anything
	  - Otherwise, format and stream to output

    ** Need tap.conf, JobManager(TapRestlet), queryRunner(TapQuery), output processing

ObsTAP Service
    Params
      - Service endpoint mapping
      - DBMS target info (DBMS, login/password)
      - Table to be queried
      - Output table customization if any


Saving a query resultSet to a new table
-----------------------------------------

    Often the new table will be in a different DBMS than that that
    generated the resultSet, hence something like CREATE TABLE (SELECT...)
    cannot be used.  Instead assume that the input query and output
    table are separate DBMS connections, probably executing with
    different accounts (input generic, output per-user).

    Use JDBC prepared statement plus batch execution
    For MySQL: rewriteBatchedStatements=true

