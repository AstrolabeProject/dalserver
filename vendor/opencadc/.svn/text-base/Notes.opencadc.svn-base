OpenCADC Notes
------------------------------

Building
    Source setup.csh to build, run ant in each project directory
    Library Jars are copied to dalserver/lib
    For OpenCADC external dependencies we generally do not include
    sources here.


UWS
    JobRunner - Uses UWS framework to run a job (what is done)
      - Custom for the service class
    JobManager - Manages how a job is run (how it is done)
      - Custom for each execution framework
      - Interfaces to the HTTP layer
      - Calls the registered JobRunner to run the job
    JobPersistence - Persists the job state
      - Memory (for testing) and DBMS versions
    JobExecutor - Manages the execution/control of a job
      - Thread pool
    InlineContentHandler
      - Extracts job description from request

    Sync, async Web resources point to custom JobManager
      - what is executed determined by sync/async URL fragment and parameters
      - restlet class (www.restlet.org) processes the request
	  - calls the client JobRunner to run the job
      - simplest case, runner provides only one task
      - more complex case, task to be run is a parameter

    UWS framework calls registered JobRunner with given URL path, params


cadcSampleTAP source code
    SampleJobManager extends SimpleJobManager
      - Job persistence, job executor (runner)
    AdqlQueryImplementation exends adqlQuery
      - for postgreSQL convert TOP to LIMIT
      -	any other custom query translation
    ResultStoreImpl implements ResultStore
      - saves resultSet to a file, returns URL
    SampleWebService extends WebService
      - getStatus returns AvailabilityStatus


web.xml for cadcSampleTAP web-app
    /sync/* -> SyncServlet
    /async/* -> AsyncServlet

    SyncServlet
      -> ca.nrc.cadc.uws.server.SyncServlet (layer on async)

    AsyncServlet
      -> org.restlet.ext.servlet.ServerServlet
      	uws.server.JobManager = sample.SampleJobManager
      	uws.server.SyncServlet.execOnGET = true
      	uws.server.SyncServlet.execOnPOST = false

    JobManager = sample.SampleJobManager
      registers TAP QueryRunner.class as JobExecutor

TAP.QueryRunner extends JobRunner
    getParameterList
    getResultStore plugin
    set UWS job status to Executing
    run TapValidator on query
    handle Upload if any
    read TapSchema
    set up MaxRecValidator

    getTapQuery object from plugin
      get SQL from TapQuery
    create TapTableWriter from plugin
      setFormatFactory plugin

    queryDataSource.getConnection()     # get DBMS connection
    pstmt = connection.prepareStatement)sql)
    resultSet = pstmt.executeQuery()      # execute query

    if (syncOutput)
      tableWriter.write(resultSet, <clientOutputStream>)
    else
      put resultSet to ResultStore using tableWriter

    set UWS job status to Completed


Use of Restlet package
    All /async/* -> org.restlet.ext.servlet.ServerServlet
        - Param org.restlet.application -> UWSAsyncApplication()
      UWSAsyncApplication
        - Uses the Servlet adaptor
        - Defines a router to map UWS endpoints to JobAsynchResource.class
      JobAsyncResource
        - Handles all the resource /whatever requests
	- PHASE=run -> JobManager.execute(job)
      JobManager.execute(job)
        - Calls JobExecutor posted by JobManager
        - JobExecutor calls custom Job runner -> TAP.queryRunner()


