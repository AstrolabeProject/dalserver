DALServer VO Data Services Framework V0.9
D.Tody May 2015

D.Tody, R.Plante, M.Cresitello-Dittmar, M.Graham, V.Vekkirala,
O.Pevunova September 2014 (VAO version)
--------------------------------------------------------

This package contains code for implementing IVOA Data Access Layer (DAL)
services.  This version supports SCS (simple cone search), SIAP
(images), SSAP (spectra), and SLAP (spectral line lists).

Full Javadoc-format documentation for the DALServer packages is given in
the "dist/docs" subdirectory.  Additional documentation is given in the
README files in each major source or runtime directory.

A brief summary of what is required to install the DALServer framework
and configure local data services follows.  More detailed documentation
is available on the Web, or via the DALServer administration Web-UI.


Prerequisites
------------------

To install and run the DALServer framework one should already have a
Java application server or servlet container installed, e.g., Apache
Tomcat.  This is sufficient to merely install and run the framework.

To configure any local data services one also needs to have database
management system (DBMS) configured, e.g., MySql, PostgreSql, or Oracle.
To publish a catalog via the cone search protocol, the catalog should
already be loaded into a database table.  To publish an image or
spectral data collection, an index table is required containing metadata
describing the datasets comprising the data collection to be published.


Installation
------------------

To install DALServer, merely download the DALServer distribution tarball
from the Web, unpack it and deploy the provided
"dals.war" app file to your local application server, e.g., Tomcat.
How a Web-app is deployed depends upon the application server, but this
is typically done using the administration Web GUI of the application
server, or by merely copying the Web-app file to the "webapps" directory
of the installed application server.  By default the application will be
automatically deployed and available for use.

The DALServer console Web-UI should then be available at the following
URL:

    http://<host>[:<port]/dals

e.g., http://localhost:8090/dals would work for the usual case where
the application server is running on the local host computer on the
default port, 8090.

The generic DALServer application contains several builtin services that
may then be run via the Web UI to verify that everything is working
correctly.  These builtin test/demo service instances exercise the same
generic service code that will be used for any real data services you
add later.


Configuration
------------------

Service configuration is performed by editing 1 or 2 service
configuration text files, typically be copying and modifying an existing
configuration or a template file.

Local configuration data is stored externally to the DALServer Webapp
(dals.war) to ensure that it is not lost when a new version of the
Webapp is installed.  By default local configuration data is stored in
the directory "/etc/dals/config" on the server running the Java
application server (refer to the instructions given in the detailed
documentation if you need to use a different directory).  If you
unpacked the DALServer tarball into this directory earlier, you will
already have sample and template configuration files available in this
directory, ready to be used to configure new services.

Every service instance requires at least a service configuration
(".conf") file.  Each service may optionally have a table configuration
(".tab") file, used to customize the metadata data to be returned by the
service, or the interface to the DBMS table used to drive the service.
A global "server.conf" file defines the global DALServer configuration
and points to the locally added data services.

An example of a local service configuration file follows:

    README               server.conf             siapv2-vlafirst.conf
    reload.conf          siap-null.conf          siapv2-vlafirst.tab
    scs-messier.conf     siapv1-vlafirst.conf    slap-null.conf
    scs-vlafirst.conf    siapv1-vlafirst.tab     ssap-null.conf
    scsVaoImage.conf     siapv2-vao.conf
    scsVaoImage.tab      siapv2-vao.tab

For example, if we wanted to configure a new cone service for the Abell
catalog, we would add a new service configuration file, e.g.,
"scs-abell.conf", optionally a table configuration file as well
("scs-abell.tab"), and add a line to server.conf telling it to create a
service instance for the new cone search service.

Once the service configuration has been edited, the DALServer "reload"
resource is used to reload the local configuration (for all service
instances) [note - we need to add login/password authentication to
prevent unauthorized use of reload].  For example,

    http://localhost:8090/dals/reload

A reload should be performed whenever the configuration changes or
whenever a new version of the DALServer Web-app is installed.  If
"reload" executes successfully it prints a summary of the new service
configuration, e.g.:

    WebApp: Astrolabe VO Server (DALServer)
      7 Webapp system params, 20 DALServer global params

    reload		config service with 3 parameters
      reload	        servlet with 0 parameters
    scs-messier	        scs service with 13 parameters
      scs-messier	servlet with 2 parameters
    siap		siap service with 6 parameters
      siap		servlet with 0 parameters
    ssap-null	        ssa service with 4 parameters
      ssap		servlet with 0 parameters
    scs-vos		scs service with 5 parameters tableconfig
      scs-vos	        servlet with 0 parameters
    siav1-vos	        sia service with 6 parameters tableconfig
      siav1-vos	        servlet with 0 parameters
    siav2-vos	        sia service with 5 parameters
      siav2-vos	        servlet with 0 parameters
    tap-vos		tap service with 12 parameters
      SyncServlet	servlet with 3 parameters
      AsyncServlet	servlet with 2 parameters
      CapServlet	servlet with 4 parameters
      AvailabilityServlet  servlet with 1 parameters
      TableServlet	servlet with 0 parameters
    pluginFactory	global pset with 8 properties
    resultStoreImpl	global pset with 4 properties

    Successfully created 8 services and 12 servlets
    Successfully created 2 global property files
    Successfully copied 0 files
    2019/08/16 18:17:02

More detailed instructions for configuring new services are given in the
DALServer documentation.


Data Ingest
------------------

[TBA - Describe how to use data collection ingest tools]


Custom Extensions
------------------

[TBA - Basically, install the source, modify or extend as desired, and
rebuild using Java Ant.  The prebuilt dals.war includes full Javadoc
documentation for the DALServer classes.  Note, a custom build is not
required for normal use of DALServer.]

