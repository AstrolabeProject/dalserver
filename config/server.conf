# Astrolabe Project - DALServer VO Service Framework Global Configuration
# -------------------------------------------------------------------------

[web-app]

# Identify this instance of the DALServer Web application and its services.
# -------------------------------------------------------------------------

display-name =
	Astrolabe VO Server (DALServer)

description =
	This configuration defines a number of DALserver services that constitute
	the Astrolabe Project VO server.


[context-params]

# Web-app params passed as part of the Servlet context.
# These are required for the primary config "reload" servlet.
# Service application code may or may not be able to see these.

# The Web-app name (should match WAR file root name).
webAppName = ivoa-dal

# The configuration directory for DALServer services.
configDir = /opt/services/dalserver

# The configuration directory for DALServer services.
configFile = server.conf

# Set to a value other than "none" to enable password protection for reload.
# configKey = none

# Web-app configuration file pathname, relative to Web-app root.
webAppConfig = /WEB-INF/web.xml

# Web-app runtime classes path, relative to Web-app root.
webAppClasses = /WEB-INF/classes


[webapp-params]

# Global context parameters for all DALServer Web-app servlets.
# The default values provided here may be overridden in the configuration
# for an individual service.
# -------------------------------------------------------------------------

# The IVOA Authority ID (registered data publisher) for our site.
authorityId = ivo://nrao/vo/

# The baseURL for service requests that come back to the server.
#
baseUrl = http://localhost:8080/ivoa-dal

# The default MIME type of any data files returned by the service.  If the
# parameter is omitted or "dynamic" is specified, the service will attempt
# to determine the content type of the file.
#
contentType = dynamic

# The default root data storage directory for DALServer services.
# dataDirURL = file:///data/vos/testdata
dataDirUrl = /data/vos/testdata

# The default root data staging directory for DALServer services.
stagingDir = /data/vos/storage/staging

# Maxrec default for older services (deprecated).
maxrec = 10000

# Default maximum records in a request response.
maxrecDefault = 1000

# Upper limit for maxrec.
maxrecLimit = 10000

# No documentation found for minorVersion: only known values 'generic' and 'test'
minorVersion = generic

# Default column mappings for the SCS service:
idColumn = obs_id
raColumn = s_ra
decColumn = s_dec

# Default database column mappings:
schemaName = sia
tableName = jwst

# Default JDBC configuration:
dbName = vos
dbPassword = changeMe
dbType = PostgreSQL
dbUser = alquery
jdbcDriver = org.postgresql.Driver
jdbcUrl = jdbc:postgresql://localhost:54320/


# Task Daemon configuration:
# tdLocation = localhost:7464
# tdName = tdaemon
# cutoutTask = /data/vos/tasks/bin/vocutout


[services]

# Service instances.  Configure your local data services here.
# Metadata for each service instance is defined in the service config file.
# -------------------------------------------------------------------------

# Framework configuration.
reload			# Reload the framework configuration

# Built-in demo/test servlets (built into Webapp).
scs-messier		# Built-in Messier catalog SCS service
siap-null		# SIA null/test query service
ssap-null		# SSA null/test query service

# Local data services.
scs-vos                 # Astrolabe project SCS service for JWST (PostgreSQL)
siav1-vos               # Astrolabe project SIAV1 service for JWST (PostgreSQL)
siav2-vos               # Astrolabe project SIAV2 service for JWST (PostgreSQL)
# siav2-vosCap.conf       # Astrolabe project SIAV2 capabilities service for JWST
# ssa-vos                 # Astrolabe project SSA interface for JWST (PostgreSQL)
# tap-demo                # Demo/test TAP service (PostgreSQL)

[file-copies]

# Files to be copied directly to the Web-app.  The local file named on the
# left is copied to the pathname at the right, which is specified relative
# to the Web-app root directory.  This is required (for example) to configure
# DataSource references, and may be used to install custom Java plugin classes.
# The following are provided as examples, but are not used in the default
# configuration.
# ------------------------------------------------------------------------

#context.xml = META-INF/context.xml
#FileStore.class = WEB-INF/classes/ResultStoreImpl.class


[global-params]

# Global named parameter sets (available to all services).
# ---------------------------------------------------------
pluginFactory		# Used by TAP
resultStoreImpl		# Used by TAP
